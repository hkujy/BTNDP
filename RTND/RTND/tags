!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
10	.\RSPATH.F90	/^	10    continue$/;"	l	subroutine:rsp	file:
10	.\dpsoslver.f90	/^10  call projection(this%x_bar,this%x,this%fx,this%beta,this%nwk)$/;"	l	subroutine:dpmain	file:
10	.\genetic.f90	/^10  do nr=1,ndest$/;"	l	subroutine:projection	file:
10	.\genetic_simplexprojection.f90	/^10	set_i=0$/;"	l	subroutine:simplex_projection	file:
100	.\RSPATH.F90	/^	100   continue$/;"	l	subroutine:rsp	file:
1000	.\dpsoslver.f90	/^1000 call cpu_time(time_end)$/;"	l	subroutine:dpmain	file:
1000	.\msasolver.f90	/^1000	call cpu_time(time_end)$/;"	l	subroutine:solver	file:
20	.\RSPATH.F90	/^	20       q(endq) = nd$/;"	l	subroutine:rsp	file:
20	.\dpsoslver.f90	/^20  numerator=norm_value2(this%x,this%x_bar,nl,ndest)$/;"	l	subroutine:dpmain	file:
201	.\RSPATH.F90	/^	201   n1 = q(p)$/;"	l	subroutine:rsp	file:
30	.\RSPATH.F90	/^	30       q(nd) = q(p)$/;"	l	subroutine:rsp	file:
5	.\graphlib.f90	/^5   this%isUEconverge = .true.$/;"	l	subroutine:updatesub	file:
5	.\msasolver.f90	/^5   x0 = this%x$/;"	l	subroutine:solver	file:
66	.\solverlib.f90	/^66  if (isusebcm) then $/;"	l	subroutine:backward_update_fx	file:
998	.\dpsoslver.f90	/^998 this%x=this%x_bar$/;"	l	subroutine:dpmain	file:
999	.\dpsoslver.f90	/^999 write(*,*) "done"$/;"	l	subroutine:solver	file:
BACKWARD_UPDATE_FX__genmod	.\Debug\backward_update_fx__genmod.f90	/^        MODULE BACKWARD_UPDATE_FX__genmod$/;"	m
CAL_FX__genmod	.\Debug\cal_fx__genmod.f90	/^        MODULE CAL_FX__genmod$/;"	m
CAL_MSA_FX__genmod	.\Debug\cal_msa_fx__genmod.f90	/^        MODULE CAL_MSA_FX__genmod$/;"	m
COUNTCONECT__genmod	.\Debug\countconect__genmod.f90	/^        MODULE COUNTCONECT__genmod$/;"	m
DPMAIN__genmod	.\Debug\dpmain__genmod.f90	/^        MODULE DPMAIN__genmod$/;"	m
ERROR_EUCLIDEAN_DISTANCE__genmod	.\Debug\error_euclidean_distance__genmod.f90	/^        MODULE ERROR_EUCLIDEAN_DISTANCE__genmod$/;"	m
EvaluateSol	.\MyClass.F90	/^    subroutine EvaluateSol(/;"	s	module:MySolClass
FACT__genmod	.\Debug\fact__genmod.f90	/^        MODULE FACT__genmod$/;"	m
FORWARD_UPDATE_FLOW__genmod	.\Debug\forward_update_flow__genmod.f90	/^        MODULE FORWARD_UPDATE_FLOW__genmod$/;"	m
Fitness	.\MyClass.F90	/^        real*8::Fitness$/;"	k	type:SolClass
Fleet	.\MyClass.F90	/^        integer::Fleet(/;"	k	type:SolClass
GETORDER__genmod	.\Debug\getorder__genmod.f90	/^        MODULE GETORDER__genmod$/;"	m
GET_SUM__genmod	.\Debug\get_sum__genmod.f90	/^        MODULE GET_SUM__genmod$/;"	m
GET_TOTALCOST__genmod	.\Debug\get_totalcost__genmod.f90	/^        MODULE GET_TOTALCOST__genmod$/;"	m
GraphLib	.\graphlib.f90	/^    module GraphLib$/;"	m
ID	.\MyClass.F90	/^        integer::ID$/;"	k	type:SolClass
INITIAL_X__genmod	.\Debug\initial_x__genmod.f90	/^        MODULE INITIAL_X__genmod$/;"	m
LINK_TIME__genmod	.\Debug\link_time__genmod.f90	/^        MODULE LINK_TIME__genmod$/;"	m
LOWERLEVEL__genmod	.\Debug\lowerlevel__genmod.f90	/^        MODULE LOWERLEVEL__genmod$/;"	m
MINSP__genmod	.\Debug\minsp__genmod.f90	/^        MODULE MINSP__genmod$/;"	m
MSA2__genmod	.\Debug\msa2__genmod.f90	/^        MODULE MSA2__genmod$/;"	m
MyClassModule	.\MyClass.F90	/^    module MyClassModule$/;"	m
MySolClass	.\MyClass.F90	/^    module MySolClass$/;"	m
NCP_ERROR__genmod	.\Debug\ncp_error__genmod.f90	/^        MODULE NCP_ERROR__genmod$/;"	m
NODE_FLOW__genmod	.\Debug\node_flow__genmod.f90	/^        MODULE NODE_FLOW__genmod$/;"	m
NORM_VALUE0__genmod	.\Debug\norm_value0__genmod.f90	/^        MODULE NORM_VALUE0__genmod$/;"	m
NORM_VALUE2__genmod	.\Debug\norm_value2__genmod.f90	/^        MODULE NORM_VALUE2__genmod$/;"	m
NORM_VALUE__genmod	.\Debug\norm_value__genmod.f90	/^        MODULE NORM_VALUE__genmod$/;"	m
ORDER__genmod	.\Debug\order__genmod.f90	/^        MODULE ORDER__genmod$/;"	m
OUTPUTOD__genmod	.\Debug\outputod__genmod.f90	/^        MODULE OUTPUTOD__genmod$/;"	m
OUTPUTPARA__genmod	.\Debug\outputpara__genmod.f90	/^        MODULE OUTPUTPARA__genmod$/;"	m
OUTPUTPATH__genmod	.\Debug\outputpath__genmod.f90	/^        MODULE OUTPUTPATH__genmod$/;"	m
OUTPUTX__genmod	.\Debug\outputx__genmod.f90	/^        MODULE OUTPUTX__genmod$/;"	m
PROJECTION__genmod	.\Debug\projection__genmod.f90	/^        MODULE PROJECTION__genmod$/;"	m
READNETWORK__genmod	.\Debug\readnetwork__genmod.f90	/^        MODULE READNETWORK__genmod$/;"	m
READPARA__genmod	.\Debug\readpara__genmod.f90	/^        MODULE READPARA__genmod$/;"	m
RSP__genmod	.\Debug\rsp__genmod.f90	/^        MODULE RSP__genmod$/;"	m
SELF_REGULATED_MSA__genmod	.\Debug\self_regulated_msa__genmod.f90	/^        MODULE SELF_REGULATED_MSA__genmod$/;"	m
SET_MYLINE_FLEET__genmod	.\Debug\set_myline_fleet__genmod.f90	/^        MODULE SET_MYLINE_FLEET__genmod$/;"	m
SET_TEST_FLEET__genmod	.\Debug\set_test_fleet__genmod.f90	/^        MODULE SET_TEST_FLEET__genmod$/;"	m
SHORTEST_PATH_UPDATE_FX__genmod	.\Debug\shortest_path_update_fx__genmod.f90	/^        MODULE SHORTEST_PATH_UPDATE_FX__genmod$/;"	m
SIMPLEX_PROJECTION__genmod	.\Debug\simplex_projection__genmod.f90	/^        MODULE SIMPLEX_PROJECTION__genmod$/;"	m
SP__genmod	.\Debug\sp__genmod.f90	/^        MODULE SP__genmod$/;"	m
SUBRSP__genmod	.\Debug\subrsp__genmod.f90	/^        MODULE SUBRSP__genmod$/;"	m
SolClass	.\MyClass.F90	/^    type SolClass$/;"	t	module:MySolClass
SolverLib	.\solverlib.f90	/^    module SolverLib$/;"	m
TEST_ONE_FLEET_SOL__genmod	.\Debug\test_one_fleet_sol__genmod.f90	/^        MODULE TEST_ONE_FLEET_SOL__genmod$/;"	m
TREE__genmod	.\Debug\tree__genmod.f90	/^        MODULE TREE__genmod$/;"	m
UPDATESECTIONCOST__genmod	.\Debug\updatesectioncost__genmod.f90	/^        MODULE UPDATESECTIONCOST__genmod$/;"	m
UPDATESUB__genmod	.\Debug\updatesub__genmod.f90	/^        MODULE UPDATESUB__genmod$/;"	m
UPDATE_ALPH__genmod	.\Debug\update_alph__genmod.f90	/^        MODULE UPDATE_ALPH__genmod$/;"	m
UPDATE_LINEFRE__genmod	.\Debug\update_linefre__genmod.f90	/^        MODULE UPDATE_LINEFRE__genmod$/;"	m
UPDATE_SECFRE__genmod	.\Debug\update_secfre__genmod.f90	/^        MODULE UPDATE_SECFRE__genmod$/;"	m
WRITEPARA__genmod	.\Debug\writepara__genmod.f90	/^        MODULE WRITEPARA__genmod$/;"	m
anode	.\graphlib.f90	/^        integer::anode(/;"	k	type:graphclass
backanode	.\graphlib.f90	/^        integer::backanode(/;"	k	type:graphclass
backbnode	.\graphlib.f90	/^        integer::backanode(nl),backbnode(/;"	k	type:graphclass
backtoforward	.\graphlib.f90	/^        integer::backtoforward(/;"	k	type:graphclass
backward_update_fx	.\solverlib.f90	/^    subroutine backward_update_fx(/;"	s	module:SolverLib
bcmratio	.\para.f90	/^    real*8, PARAMETER::bcmratio /;"	v	module:constpara
beta	.\dpsoslver.f90	/^        real*8::beta,/;"	v	module:dpsolverlib
betastep	.\dpsoslver.f90	/^        real*8::beta,lama,v,miu,tau,betastep$/;"	v	module:dpsolverlib
bnode	.\graphlib.f90	/^        integer::anode(nl),bnode(/;"	k	type:graphclass
bs	.\para.f90	/^    real*8::bs(/;"	v	module:constpara
cal_bcm_fx	.\solverlib.f90	/^    subroutine cal_bcm_fx(/;"	s
cal_fx	.\solverlib.f90	/^    subroutine cal_fx(/;"	s
capk	.\para.f90	/^    real*8::capk$/;"	v	module:constpara
caseindex	.\graphlib.f90	/^        integer::caseindex=/;"	k	type:graphclass
caseindex	.\para.f90	/^    integer::caseindex=/;"	v	module:constpara
cleanfiles	.\lowermain.f90	/^    subroutine cleanfiles$/;"	s
competesec	.\graphlib.f90	/^        integer::competesec(/;"	k	type:graphclass
congestion_n	.\para.f90	/^    integer::congestion_n$/;"	v	module:constpara
connect	.\graphlib.f90	/^        logical::connect(/;"	k	type:graphclass
constpara	.\para.f90	/^    module constpara$/;"	m
countconect	.\graphlib.f90	/^    subroutine countconect(/;"	s	module:GraphLib
cputime	.\solverlib.f90	/^        real*8::ncperr,cputime$/;"	k	type:methods
delfloweps	.\para.f90	/^    real*8,parameter::delfloweps /;"	v	module:constpara
demand	.\graphlib.f90	/^        real*8::demand(/;"	k	type:graphclass
dest	.\graphlib.f90	/^        integer::dest(/;"	k	type:graphclass
dist	.\para.f90	/^    real*8::dist(/;"	v	module:constpara
disterr	.\msasolver.f90	/^    real*8::disterr$/;"	v	module:msasolverlib
dpmain	.\dpsoslver.f90	/^    subroutine dpmain(/;"	s	module:dpsolverlib
dpsolverlib	.\dpsoslver.f90	/^module dpsolverlib$/;"	m
employ_bee	.\abc.f90	/^subroutine employ_bee(/;"	s
fact	.\graphlib.f90	/^    real*8 function fact(/;"	f
fare	.\graphlib.f90	/^        real*8::fare(/;"	k	type:graphclass
firstin	.\graphlib.f90	/^        integer::firstin(/;"	k	type:graphclass
firstout	.\graphlib.f90	/^        integer::firstout(/;"	k	type:graphclass
flow_eps	.\para.f90	/^    real*8, parameter::flow_eps=/;"	v	module:constpara
forward_update_flow	.\solverlib.f90	/^    subroutine forward_update_flow(/;"	s	module:SolverLib
fre	.\graphlib.f90	/^        real*8::fre(/;"	k	type:graphclass
fx	.\solverlib.f90	/^        real*8::fx(/;"	k	type:methods
fx_bar	.\dpsoslver.f90	/^        real*8::fx_bar(/;"	v	module:dpsolverlib
gama	.\para.f90	/^    real*8,parameter::gama=/;"	v	module:constpara
gapfileno	.\para.f90	/^    integer,parameter::gapfileno /;"	v	module:constpara
gapfileno	.\solverlib.f90	/^        integer::gapfileno$/;"	k	type:methods
gc_update_secfre	.\graphlib.f90	/^    subroutine gc_update_secfre(/;"	s	module:GraphLib
gc_updatesectioncost	.\graphlib.f90	/^    subroutine gc_updatesectioncost(/;"	s	module:GraphLib
gen_sol	.\abc.f90	/^subroutine gen_sol(/;"	s
geninisol	.\solverlib.f90	/^    subroutine geninisol(/;"	s	module:SolverLib
get_bcmval	.\solverlib.f90	/^   function get_bcmval(/;"	f	module:SolverLib
get_sum	.\genetic_simplexprojection.f90	/^		real*8 function get_sum(/;"	f
getncperr	.\solverlib.f90	/^    function getncperr(/;"	f
getorder	.\graphlib.f90	/^    subroutine getorder(/;"	s	module:GraphLib
graphclass	.\graphlib.f90	/^    type, public::graphclass$/;"	t	module:GraphLib
inf1	.\para.f90	/^    real*8, parameter:: inf1=/;"	v	module:constpara
iniassignflow	.\solverlib.f90	/^    subroutine iniassignflow(/;"	s	module:SolverLib
init_arc_flow	.\solverlib.f90	/^    subroutine init_arc_flow(/;"	s
initial_x	.\solverlib.f90	/^    subroutine initial_x(/;"	s	module:SolverLib
inputseed	.\para.f90	/^    integer,parameter::inputseed /;"	v	module:constpara
isNCPconverge	.\solverlib.f90	/^        logical::isNCPconverge$/;"	k	type:methods
isUEconverge	.\graphlib.f90	/^        logical::isUEconverge$/;"	k	type:graphclass
isdebug	.\para.f90	/^    logical,parameter::isdebug /;"	v	module:constpara
islogit	.\para.f90	/^    logical, parameter::islogit /;"	v	module:constpara
isusebcm	.\para.f90	/^    logical, parameter::isusebcm /;"	v	module:constpara
lama	.\dpsoslver.f90	/^        real*8::beta,lama,/;"	v	module:dpsolverlib
large	.\para.f90	/^    real*8, parameter:: large /;"	v	module:constpara
lastin	.\graphlib.f90	/^        integer::firstin(nn),lastin(/;"	k	type:graphclass
lastout	.\graphlib.f90	/^        integer::firstout(nn),lastout(/;"	k	type:graphclass
lf	.\solverlib.f90	/^        real*8::lf(/;"	k	type:methods
line	.\graphlib.f90	/^        integer::line(/;"	k	type:graphclass
linestops	.\graphlib.f90	/^        integer::linestops(/;"	k	type:graphclass
link_time	.\graphlib.f90	/^    subroutine link_time(/;"	s	module:GraphLib
lndist	.\para.f90	/^    real*8::lndist(/;"	v	module:constpara
locatecompete	.\graphlib.f90	/^        integer::locatecompete(/;"	k	type:graphclass
logfileno	.\para.f90	/^    integer,parameter::logfileno /;"	v	module:constpara
logitprob	.\solverlib.f90	/^        real*8::logitprob(/;"	k	type:methods
lt	.\solverlib.f90	/^        real*8::lt(/;"	k	type:methods
macsolc	.\para.f90	/^    integer,parameter::macsolc /;"	v	module:constpara
maxcom	.\para.f90	/^    integer,parameter::maxcom /;"	v	module:constpara
maxcpu	.\para.f90	/^    real*8,parameter::maxcpu /;"	v	module:constpara
maxct	.\para.f90	/^    real*8,parameter::maxct /;"	v	module:constpara
maxfre	.\para.f90	/^    real*8,parameter::maxfre /;"	v	module:constpara
maxiteration	.\para.f90	/^    integer,parameter::maxiteration=/;"	v	module:constpara
maxlinestops	.\para.f90	/^    integer,parameter::maxlinestops /;"	v	module:constpara
maxsecline	.\para.f90	/^    integer,parameter::maxsecline=/;"	v	module:constpara
method_outputpath	.\solverlib.f90	/^    subroutine method_outputpath(/;"	s
methods	.\solverlib.f90	/^    type,public::methods$/;"	t	module:SolverLib
minfre	.\para.f90	/^    real*8,parameter::minfre /;"	v	module:constpara
minspantree	.\graphlib.f90	/^    subroutine minspantree(/;"	s	module:GraphLib
miu	.\dpsoslver.f90	/^        real*8::beta,lama,v,miu,/;"	v	module:dpsolverlib
msa	.\genetic.f90	/^    subroutine msa(/;"	s
msasolverlib	.\msasolver.f90	/^    module msasolverlib$/;"	m
name	.\solverlib.f90	/^        character(len = 10)::name$/;"	k	type:methods
ncp_eps	.\para.f90	/^    real*8, parameter::ncp_eps=/;"	v	module:constpara
ncp_flow_eps	.\para.f90	/^    real*8, parameter::ncp_flow_eps /;"	v	module:constpara
ncperr	.\solverlib.f90	/^        real*8::ncperr,/;"	k	type:methods
ndest	.\para.f90	/^    integer,parameter::ndest=/;"	v	module:constpara
ndist	.\graphlib.f90	/^        real*8::ndist(/;"	k	type:graphclass
nf	.\solverlib.f90	/^        real*8::nf(/;"	k	type:methods
nl	.\para.f90	/^    integer,parameter::nl=/;"	v	module:constpara
nline	.\para.f90	/^    integer,parameter::nline=/;"	v	module:constpara
nn	.\para.f90	/^    integer,parameter::nn=/;"	v	module:constpara
nod	.\para.f90	/^    integer,parameter::nod=/;"	v	module:constpara
node_exp_sum	.\solverlib.f90	/^        real*8::node_exp_sum(/;"	k	type:methods
node_flow	.\solverlib.f90	/^    subroutine node_flow(/;"	s	module:SolverLib
norm_value	.\genetic_normval.F90	/^real*8 function norm_value(/;"	f
norm_value0	.\genetic_normval.F90	/^real*8 function norm_value0(/;"	f
norm_value2	.\genetic_normval.F90	/^real*8 function norm_value2(/;"	f
numcom	.\graphlib.f90	/^        integer::numcom(/;"	k	type:graphclass
numconnect	.\graphlib.f90	/^        integer::numconnect(/;"	k	type:graphclass
nwk	.\solverlib.f90	/^        type(graphclass)::nwk$/;"	k	type:methods
on_looker	.\abc.f90	/^subroutine on_looker(/;"	s
order	.\graphlib.f90	/^	subroutine order(/;"	s	module:GraphLib
origin	.\graphlib.f90	/^        integer::dest(nod),origin(/;"	k	type:graphclass
outputod	.\solverlib.f90	/^    subroutine outputod(/;"	s
outputx	.\solverlib.f90	/^    subroutine outputx(/;"	s
pa	.\graphlib.f90	/^        integer pa(/;"	k	type:graphclass
piter	.\para.f90	/^    integer::piter$/;"	v	module:constpara
projection	.\genetic.f90	/^    subroutine projection(/;"	s
read_para	.\para.f90	/^    subroutine read_para$/;"	s	module:constpara
readnwt	.\graphlib.f90	/^    subroutine readnwt(/;"	s	module:GraphLib
readpara	.\READPARA.f90	/^    subroutine readpara$/;"	s
readpare	.\dpsoslver.f90	/^    subroutine readpare(/;"	s	module:dpsolverlib
rio	.\para.f90	/^    real*8, PARAMETER::rio=/;"	v	module:constpara
roots	.\graphlib.f90	/^        integer::roots(/;"	k	type:graphclass
rsp	.\RSPATH.F90	/^		subroutine rsp(/;"	s
scost	.\graphlib.f90	/^        real*8::scost(/;"	k	type:graphclass
set_fleet	.\MyClass.F90	/^    subroutine set_fleet(/;"	s	module:MySolClass
set_myline_fleet	.\belivel.f90	/^    subroutine set_myline_fleet(/;"	s
set_test_fleet	.\belivel.f90	/^    subroutine set_test_fleet$/;"	s
sf	.\graphlib.f90	/^        real*8::sf(/;"	k	type:graphclass
simplex_projection	.\genetic_simplexprojection.f90	/^    subroutine simplex_projection(/;"	s
sindex	.\graphlib.f90	/^        integer sindex(/;"	k	type:graphclass
sl	.\graphlib.f90	/^        integer::sl(/;"	k	type:graphclass
slc	.\graphlib.f90	/^        integer::slc(/;"	k	type:graphclass
slf	.\graphlib.f90	/^        real*8::slf(/;"	k	type:graphclass
solc	.\solverlib.f90	/^        integer::solc$/;"	k	type:methods
solver	.\dpsoslver.f90	/^    subroutine solver(/;"	s	module:dpsolverlib
solver	.\msasolver.f90	/^    subroutine solver(/;"	s	module:msasolverlib
stepsize	.\msasolver.f90	/^    real*8::stepsize$/;"	v	module:msasolverlib
sublink	.\graphlib.f90	/^        logical::sublink(/;"	k	type:graphclass
submax	.\para.f90	/^    integer,parameter::submax=/;"	v	module:constpara
subnode	.\graphlib.f90	/^        logical::sublink(nl,ndest),subnode(/;"	k	type:graphclass
svar	.\graphlib.f90	/^        real*8::scost(nl),svar(/;"	k	type:graphclass
tau	.\dpsoslver.f90	/^        real*8::beta,lama,v,miu,tau,/;"	v	module:dpsolverlib
test_one_fleet_sol	.\belivel.f90	/^    subroutine test_one_fleet_sol(/;"	s
tests	.\solverlib.f90	/^        integer::tests$/;"	k	type:methods
theta	.\para.f90	/^    real*8, parameter::theta /;"	v	module:constpara
torder	.\graphlib.f90	/^        integer::torder(/;"	k	type:graphclass
totalfleet	.\para.f90	/^    integer,parameter::totalfleet /;"	v	module:constpara
tsl	.\graphlib.f90	/^        real*8:: tsl(/;"	k	type:graphclass
update_alph	.\dpsoslver.f90	/^    real*8 function update_alph(/;"	f	module:dpsolverlib
updatesub	.\graphlib.f90	/^    subroutine updatesub(/;"	s	module:GraphLib
updatesub_bcm	.\graphlib.f90	/^    subroutine updatesub_bcm(/;"	s	module:GraphLib
v	.\dpsoslver.f90	/^        real*8::beta,lama,v,/;"	v	module:dpsolverlib
walkcost	.\para.f90	/^    real*8,parameter::walkcost /;"	v	module:constpara
writepara	.\READPARA.f90	/^    subroutine writepara$/;"	s
x	.\solverlib.f90	/^        real*8::x(/;"	k	type:methods
x_bar	.\dpsoslver.f90	/^        real*8::x_bar(/;"	v	module:dpsolverlib
xfa	.\solverlib.f90	/^        real*8::xfa(/;"	k	type:methods
zero	.\para.f90	/^    real*8,parameter::zero /;"	v	module:constpara
