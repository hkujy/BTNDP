!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
10	.\module.f90	/^10		cycle_count=cycle_count+1$/;"	l	subroutine:get_neighbour	file:
40	.\module.f90	/^40		cycle_count=cycle_count+1$/;"	l	subroutine:get_neighbour	file:
5	.\draft 11 .f90	/^5   seed_cycle=seed_cycle+1	$/;"	l	file:
5	.\module.f90	/^5		index=int(ran*4+1)$/;"	l	subroutine:get_neighbour	file:
999	.\draft 11 .f90	/^999	do r=1,max_routes$/;"	l	file:
B1	.\para.f90	/^real*8,parameter:: B1=/;"	v
B2	.\para.f90	/^real*8,parameter:: B2=/;"	v
NR_ie	.\def.f90	/^integer NR_ie(/;"	v
RT_ien	.\def.f90	/^integer NR_ie(num_tsw_nodes,num_destination_nodes),RT_ikn(num_tsw_nodes,max_routes),RT_ien(/;"	v
RT_ikn	.\def.f90	/^integer NR_ie(num_tsw_nodes,num_destination_nodes),RT_ikn(/;"	v
RT_ke	.\def.f90	/^integer RT_ke(/;"	v
T_ie	.\def.f90	/^real*8  T_ie(/;"	v
T_ien	.\def.f90	/^real*8  T_ien(/;"	v
T_ikn	.\def.f90	/^real*8  T_ien(num_tsw_nodes,num_destination_nodes,max_routes),T_ikn(/;"	v
W1	.\para.f90	/^real*8,parameter :: W1=/;"	v
W2	.\para.f90	/^real*8,parameter :: W2=/;"	v
alpha_initial	.\para.f90	/^real*8,parameter ::alpha_initial=/;"	v
assignment_penalty	.\def.f90	/^real*8  assignment_penalty(/;"	v
bus_allocation	.\module.f90	/^	subroutine bus_allocation(/;"	s	module:subs
bus_string	.\def.f90	/^integer bus_string(/;"	v
check_chromsome	.\module.f90	/^	subroutine check_chromsome(/;"	s	module:subs
check_node_count	.\module.f90	/^	subroutine check_node_count(/;"	s	module:subs
chromsome	.\def.f90	/^integer chromsome(/;"	v
chromsome_length	.\para.f90	/^integer,parameter::chromsome_length=/;"	v
colony_size	.\para.f90	/^real*8,parameter ::colony_size=/;"	v
d_node	.\def.f90	/^integer d_node(/;"	v
delta	.\para.f90	/^real*8,parameter ::delta=/;"	v
demand	.\def.f90	/^real*8 demand(/;"	v
el_max	.\para.f90	/^integer,parameter::el_max=/;"	v
el_min	.\para.f90	/^integer,parameter::el_min=/;"	v
final_flow_assignment	.\module.f90	/^		subroutine final_flow_assignment(/;"	s	module:subs
final_get_object	.\module.f90	/^	subroutine final_get_object(/;"	s	module:subs
fitness	.\def.f90	/^real*8 fitness(/;"	v
flow_assignment	.\module.f90	/^		subroutine flow_assignment(/;"	s	module:subs
frequency	.\def.f90	/^real*8  frequency(/;"	v
get_T_ie	.\module.f90	/^	subroutine get_T_ie(/;"	s	module:subs
get_T_ien	.\module.f90	/^	subroutine get_T_ien(/;"	s	module:subs
get_chromsome	.\module.f90	/^	subroutine get_chromsome(/;"	s	module:subs
get_fitness	.\module.f90	/^	subroutine get_fitness(/;"	s	module:subs
get_frequency	.\module.f90	/^	subroutine get_frequency(/;"	s	module:subs
get_index	.\module.f90	/^	subroutine get_index(/;"	s	module:subs
get_neighbour	.\module.f90	/^		subroutine get_neighbour(/;"	s	module:subs
get_object	.\module.f90	/^	subroutine get_object(/;"	s	module:subs
get_route_cost	.\module.f90	/^	subroutine get_route_cost(/;"	s	module:subs
initial_bees	.\para.f90	/^integer,parameter::initial_bees=/;"	v
insert_repair	.\module.f90	/^	recursive subroutine insert_repair(/;"	s	module:subs
link_cost	.\def.f90	/^real*8 link_cost(/;"	v
local_count	.\def.f90	/^integer local_count(/;"	v
local_min_control	.\para.f90	/^integer,parameter::local_min_control=/;"	v
max_buses	.\para.f90	/^integer,parameter::max_buses=/;"	v
max_cycle	.\para.f90	/^integer,parameter::max_cycle=/;"	v
max_routes	.\para.f90	/^integer,parameter::max_routes=/;"	v
max_stops	.\para.f90	/^integer,parameter::max_stops=/;"	v
max_tsw_cost	.\para.f90	/^real*8,parameter:: max_tsw_cost=/;"	v
min_D_buses	.\def.f90	/^integer	min_D_buses(/;"	v
min_buses	.\def.f90	/^integer min_buses(/;"	v
min_fre_buses	.\def.f90	/^integer min_fre_buses(/;"	v
min_frequency	.\para.f90	/^real*8,parameter:: min_frequency=/;"	v
min_frequency_bus	.\module.f90	/^	subroutine min_frequency_bus(/;"	s	module:subs
min_initial_stops	.\para.f90	/^integer,parameter::min_initial_stops=/;"	v
node_count	.\def.f90	/^integer node_count(/;"	v
node_probability	.\module.f90	/^		subroutine node_probability(/;"	s	module:subs
node_type	.\def.f90	/^integer node_type(/;"	v
num_destination_nodes	.\para.f90	/^integer,parameter::num_destination_nodes=/;"	v
num_nodes	.\para.f90	/^integer,parameter::num_nodes=/;"	v
num_seats	.\para.f90	/^integer,parameter::num_seats=/;"	v
num_terminal_nodes	.\para.f90	/^integer,parameter::num_terminal_nodes=/;"	v
num_tsw_nodes	.\para.f90	/^integer,parameter::num_tsw_nodes=/;"	v
o_node	.\def.f90	/^integer o_node(/;"	v
objective	.\def.f90	/^real*8 objective(/;"	v
onlookers	.\para.f90	/^integer,parameter::onlookers=/;"	v
optimal_frequency	.\module.f90	/^		subroutine optimal_frequency(/;"	s	module:subs
optimal_sequence	.\module.f90	/^	subroutine optimal_sequence(/;"	s	module:subs
prob	.\def.f90	/^real*8 fitness(initial_bees),prob(/;"	v
ran	.\def.f90	/^real*8 ran /;"	v
ran_select_node	.\module.f90	/^		subroutine ran_select_node(/;"	s	module:subs
repair_operator	.\module.f90	/^	recursive subroutine  repair_operator(/;"	s	module:subs
roulette	.\module.f90	/^	subroutine roulette(/;"	s	module:subs
route_D	.\def.f90	/^integer route_D(/;"	v
route_D_cost	.\def.f90	/^real*8  route_D_cost(/;"	v
route_cost	.\def.f90	/^real*8 route_cost(/;"	v
route_gen	.\def.f90	/^integer route_gen(/;"	v
route_group	.\def.f90	/^integer route_group(/;"	v
route_length	.\para.f90	/^integer,parameter::route_length=/;"	v
sl_max	.\para.f90	/^integer,parameter::sl_max=/;"	v
sl_min	.\para.f90	/^integer,parameter::sl_min=/;"	v
stop_number	.\def.f90	/^integer stop_number(/;"	v
stop_time	.\para.f90	/^real*8,parameter:: stop_time=/;"	v
subs	.\module.f90	/^	module subs /;"	m
swap	.\module.f90	/^	subroutine swap(/;"	s	module:subs
swap_repair	.\module.f90	/^		recursive subroutine swap_repair(/;"	s	module:subs
swap_start	.\module.f90	/^		recursive subroutine swap_start(/;"	s	module:subs
tlt_e_cost	.\def.f90	/^real*8  tlt_e_cost(/;"	v
update	.\def.f90	/^integer update$/;"	v
zero	.\para.f90	/^real*8,parameter:: zero=/;"	v
